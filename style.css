// Portfolio JavaScript - Amine Belghazi | Data Science, Modélisation & IA

class Portfolio {
    constructor() {
        this.currentLang = 'fr';
        this.isLoading = true;
        this.init();
    }

    init() {
        this.initParticles();
        this.handleLoading();
        this.setupEventListeners();
        this.initScrollAnimations();
        this.initSkillBars();
        this.setupNavigation();
    }

    handleLoading() {
        setTimeout(() => {
            const loadingScreen = document.getElementById('loading-screen');
            if (loadingScreen) {
                loadingScreen.classList.add('fade-out');
                setTimeout(() => {
                    loadingScreen.style.display = 'none';
                    this.isLoading = false;
                }, 500);
            }
        }, 1500);
    }

    initParticles() {
        const canvas = document.getElementById('particles-canvas');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const particles = [];

        const resizeCanvas = () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        };

        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        for (let i = 0; i < 50; i++) {
            particles.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                vx: (Math.random() - 0.5) * 0.5,
                vy: (Math.random() - 0.5) * 0.5,
                size: Math.random() * 2 + 1,
                opacity: Math.random() * 0.5 + 0.2
            });
        }

        const animate = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            particles.forEach(p => {
                p.x += p.vx;
                p.y += p.vy;
                if (p.x < 0 || p.x > canvas.width) p.vx *= -1;
                if (p.y < 0 || p.y > canvas.height) p.vy *= -1;

                ctx.beginPath();
                ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
                ctx.fillStyle = `rgba(16, 185, 129, ${p.opacity})`;
                ctx.fill();
            });

            requestAnimationFrame(animate);
        };
        animate();
    }

    setupEventListeners() {
        const contactForm = document.getElementById('contact-form');
        if (contactForm) {
            contactForm.addEventListener('submit', this.handleContactForm.bind(this));
        }

        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', e => {
                e.preventDefault();
                const target = link.getAttribute('onclick').match(/'([^']+)'/)[1];
                this.scrollToSection(target);
            });
        });
    }

    switchLanguage(lang) {
        if (lang === this.currentLang) return;
        this.currentLang = lang;

        document.querySelectorAll('.lang-btn').forEach(btn => {
            btn.classList.toggle('active', btn.textContent === lang.toUpperCase());
        });

        document.querySelectorAll('[data-fr], [data-en]').forEach(element => {
            if (element.hasAttribute(`data-${lang}`)) {
                const text = element.getAttribute(`data-${lang}`);
                if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                    element.placeholder = text;
                } else {
                    element.textContent = text;
                }
            }
        });
    }

    scrollToSection(sectionId) {
        const element = document.getElementById(sectionId);
        if (element) {
            const navHeight = document.querySelector('.navigation').offsetHeight;
            const targetPosition = element.getBoundingClientRect().top + window.pageYOffset - navHeight;

            window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
            });
        }
    }

    setupNavigation() {
        const nav = document.getElementById('navigation');
        window.addEventListener('scroll', () => {
            if (window.scrollY > 50) nav.classList.add('scrolled');
            else nav.classList.remove('scrolled');
        });
    }

    initScrollAnimations() {
        const observerOptions = { threshold: 0.1, rootMargin: '0px 0px -50px 0px' };

        const observer = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate');

                    // ⚙️ Correction : animation des catégories de compétences
                    if (entry.target.classList.contains('skills-grid')) {
                        const categories = entry.target.querySelectorAll('.skill-category');
                        categories.forEach((cat, index) => {
                            setTimeout(() => {
                                cat.classList.add('animate');
                            }, index * 200);
                        });
                    }

                    // Animation de la timeline (projets)
                    if (entry.target.classList.contains('experience-timeline')) {
                        const items = entry.target.querySelectorAll('.timeline-item');
                        items.forEach((item, index) => {
                            setTimeout(() => item.classList.add('animate'), index * 200);
                        });
                    }
                }
            });
        }, observerOptions);

        // 🧩 Correction : ajout explicite de .skills-grid
        const elementsToObserve = [
            '.section-header',
            '.about-text',
            '.skills-grid',
            '.experience-timeline',
            '.contact-content',
            '.footer-content'
        ];

        elementsToObserve.forEach(selector => {
            document.querySelectorAll(selector).forEach(el => observer.observe(el));
        });
    }

    initSkillBars() {
        const observerOptions = { threshold: 0.5, rootMargin: '0px 0px -50px 0px' };
        const skillObserver = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const skillBars = entry.target.querySelectorAll('.skill-progress');
                    skillBars.forEach((bar, index) => {
                        const width = bar.getAttribute('data-width');
                        setTimeout(() => {
                            bar.style.setProperty('--width', width + '%');
                            bar.classList.add('animate');
                        }, index * 200);
                    });
                }
            });
        }, observerOptions);

        document.querySelectorAll('.skill-category').forEach(section => {
            skillObserver.observe(section);
        });
    }

    handleContactForm(e) {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);

        if (!data.name || !data.email || !data.message) {
            this.showNotification(
                this.currentLang === 'fr'
                    ? 'Veuillez remplir tous les champs obligatoires.'
                    : 'Please fill in all required fields.',
                'error'
            );
            return;
        }

        this.showNotification(
            this.currentLang === 'fr'
                ? '✅ Message envoyé avec succès ! Amine Belghazi vous répondra sous 24h.'
                : '✅ Message sent successfully! Amine Belghazi will respond within 24h.',
            'success'
        );
        e.target.reset();
    }

    showNotification(message, type = 'info') {
        document.querySelectorAll('.notification').forEach(n => n.remove());
        const notif = document.createElement('div');
        notif.className = `notification notification-${type}`;
        notif.textContent = message;
        document.body.appendChild(notif);
        notif.style.cssText = `
            position:fixed;top:100px;right:20px;padding:1rem 1.5rem;
            border-radius:0.75rem;color:#fff;font-weight:600;font-size:0.95rem;
            z-index:10000;max-width:400px;opacity:0;transform:translateX(100px);
            transition:all 0.3s ease;box-shadow:0 10px 40px rgba(0,0,0,0.3);
        `;
        const colors = {
            success: 'linear-gradient(135deg,#10b981,#059669)',
            error: 'linear-gradient(135deg,#ef4444,#dc2626)',
            info: 'linear-gradient(135deg,#3b82f6,#2563eb)'
        };
        notif.style.background = colors[type] || colors.info;

        setTimeout(() => {
            notif.style.opacity = '1';
            notif.style.transform = 'translateX(0)';
        }, 100);
        setTimeout(() => {
            notif.style.opacity = '0';
            notif.style.transform = 'translateX(100px)';
            setTimeout(() => notif.remove(), 300);
        }, 5000);
    }
}

// Global helpers
function switchLanguage(lang) {
    if (window.portfolio) window.portfolio.switchLanguage(lang);
}
function scrollToSection(sectionId) {
    if (window.portfolio) window.portfolio.scrollToSection(sectionId);
}

document.addEventListener('DOMContentLoaded', () => {
    window.portfolio = new Portfolio();
});

document.addEventListener('visibilitychange', () => {
    const canvas = document.getElementById('particles-canvas');
    if (!canvas) return;
    canvas.style.display = document.hidden ? 'none' : 'block';
});

// Background animation
const canvas = document.getElementById('neuron-canvas');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
const nodeCount = 80;
const nodes = [];
for (let i = 0; i < nodeCount; i++) {
    nodes.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 0.5,
        vy: (Math.random() - 0.5) * 0.5,
        move() {
            this.x += this.vx;
            this.y += this.vy;
            if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
            if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
        }
    });
}
const grad = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
grad.addColorStop(0, '#00FFFF');
grad.addColorStop(1, '#9B30FF');

function drawNetwork() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    for (let i = 0; i < nodeCount; i++) {
        for (let j = i + 1; j < nodeCount; j++) {
            const dx = nodes[i].x - nodes[j].x;
            const dy = nodes[i].y - nodes[j].y;
            const dist = Math.sqrt(dx * dx + dy * dy);
            if (dist < 200) {
                ctx.strokeStyle = 'rgba(0,255,255,0.3)';
                ctx.beginPath();
                ctx.moveTo(nodes[i].x, nodes[i].y);
                ctx.lineTo(nodes[j].x, nodes[j].y);
                ctx.stroke();
            }
        }
    }
    nodes.forEach(n => {
        ctx.fillStyle = grad;
        ctx.beginPath();
        ctx.arc(n.x, n.y, 3, 0, Math.PI * 2);
        ctx.fill();
        n.move();
    });
    requestAnimationFrame(drawNetwork);
}
drawNetwork();

setTimeout(() => {
    const screen = document.getElementById('loading-screen');
    if (screen) {
        screen.style.opacity = '0';
        setTimeout(() => (screen.style.display = 'none'), 500);
    }
}, 2500);

function toggleMenu() {
    document.querySelector('.nav-menu').classList.toggle('active');
}
